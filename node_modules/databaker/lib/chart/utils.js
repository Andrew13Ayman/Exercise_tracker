"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.drawAxis = drawAxis;

var _d3Color = require("d3-color");

function drawAxis(context, width, height, x, y, options) {
  const borderColor = (0, _d3Color.rgb)(options.borderColor); // draw axis

  context.beginPath();
  context.moveTo(0.5, .5);
  context.lineTo(0.5, height + .5);
  context.lineTo(width, height + .5);
  x.domain().forEach(label => {
    const xPx = x(label) + x.bandwidth() / 2;
    context.moveTo(xPx, height);
    context.lineTo(xPx, height + 6);
  });
  context.strokeStyle = borderColor.toString();
  context.stroke();
  context.beginPath();
  const yTickCount = 10;
  const yTicks = y.ticks(yTickCount);
  yTicks.forEach(d => {
    const yPx = y(d) + 0.5;
    context.moveTo(0, yPx);
    context.lineTo(width, yPx);
  });
  borderColor.opacity = 0.2;
  context.strokeStyle = borderColor + "";
  context.stroke();
  context.fillStyle = options.textColor;
  context.textAlign = "center";
  context.textBaseline = "top";
  x.domain().forEach(label => {
    context.fillText(label, x(label) + x.bandwidth() / 2, height + 7);
  });
  context.textAlign = "right";
  context.textBaseline = "middle";
  yTicks.forEach(d => {
    context.fillText(d + "", -9, y(d));
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jaGFydC91dGlscy50cyJdLCJuYW1lcyI6WyJkcmF3QXhpcyIsImNvbnRleHQiLCJ3aWR0aCIsImhlaWdodCIsIngiLCJ5Iiwib3B0aW9ucyIsImJvcmRlckNvbG9yIiwiYmVnaW5QYXRoIiwibW92ZVRvIiwibGluZVRvIiwiZG9tYWluIiwiZm9yRWFjaCIsImxhYmVsIiwieFB4IiwiYmFuZHdpZHRoIiwic3Ryb2tlU3R5bGUiLCJ0b1N0cmluZyIsInN0cm9rZSIsInlUaWNrQ291bnQiLCJ5VGlja3MiLCJ0aWNrcyIsImQiLCJ5UHgiLCJvcGFjaXR5IiwiZmlsbFN0eWxlIiwidGV4dENvbG9yIiwidGV4dEFsaWduIiwidGV4dEJhc2VsaW5lIiwiZmlsbFRleHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFJTyxTQUFTQSxRQUFULENBQ0xDLE9BREssRUFFTEMsS0FGSyxFQUdMQyxNQUhLLEVBSUxDLENBSkssRUFLTEMsQ0FMSyxFQU1MQyxPQU5LLEVBT0w7QUFDQSxRQUFNQyxXQUFXLEdBQUcsa0JBQUlELE9BQU8sQ0FBQ0MsV0FBWixDQUFwQixDQURBLENBR0E7O0FBQ0FOLEVBQUFBLE9BQU8sQ0FBQ08sU0FBUjtBQUNBUCxFQUFBQSxPQUFPLENBQUNRLE1BQVIsQ0FBZSxHQUFmLEVBQW9CLEVBQXBCO0FBQ0FSLEVBQUFBLE9BQU8sQ0FBQ1MsTUFBUixDQUFlLEdBQWYsRUFBb0JQLE1BQU0sR0FBRyxFQUE3QjtBQUNBRixFQUFBQSxPQUFPLENBQUNTLE1BQVIsQ0FBZVIsS0FBZixFQUFzQkMsTUFBTSxHQUFHLEVBQS9CO0FBRUFDLEVBQUFBLENBQUMsQ0FBQ08sTUFBRixHQUFXQyxPQUFYLENBQW9CQyxLQUFELElBQVc7QUFDNUIsVUFBTUMsR0FBRyxHQUFHVixDQUFDLENBQUNTLEtBQUQsQ0FBRCxHQUFZVCxDQUFDLENBQUNXLFNBQUYsS0FBZ0IsQ0FBeEM7QUFDQWQsSUFBQUEsT0FBTyxDQUFDUSxNQUFSLENBQWVLLEdBQWYsRUFBb0JYLE1BQXBCO0FBQ0FGLElBQUFBLE9BQU8sQ0FBQ1MsTUFBUixDQUFlSSxHQUFmLEVBQW9CWCxNQUFNLEdBQUcsQ0FBN0I7QUFDRCxHQUpEO0FBS0FGLEVBQUFBLE9BQU8sQ0FBQ2UsV0FBUixHQUFzQlQsV0FBVyxDQUFDVSxRQUFaLEVBQXRCO0FBQ0FoQixFQUFBQSxPQUFPLENBQUNpQixNQUFSO0FBRUFqQixFQUFBQSxPQUFPLENBQUNPLFNBQVI7QUFFQSxRQUFNVyxVQUFVLEdBQUcsRUFBbkI7QUFDQSxRQUFNQyxNQUFNLEdBQUdmLENBQUMsQ0FBQ2dCLEtBQUYsQ0FBUUYsVUFBUixDQUFmO0FBQ0FDLEVBQUFBLE1BQU0sQ0FBQ1IsT0FBUCxDQUFnQlUsQ0FBRCxJQUFPO0FBQ3BCLFVBQU1DLEdBQUcsR0FBR2xCLENBQUMsQ0FBQ2lCLENBQUQsQ0FBRCxHQUFPLEdBQW5CO0FBQ0FyQixJQUFBQSxPQUFPLENBQUNRLE1BQVIsQ0FBZSxDQUFmLEVBQWtCYyxHQUFsQjtBQUNBdEIsSUFBQUEsT0FBTyxDQUFDUyxNQUFSLENBQWVSLEtBQWYsRUFBc0JxQixHQUF0QjtBQUNELEdBSkQ7QUFLQWhCLEVBQUFBLFdBQVcsQ0FBQ2lCLE9BQVosR0FBc0IsR0FBdEI7QUFDQXZCLEVBQUFBLE9BQU8sQ0FBQ2UsV0FBUixHQUFzQlQsV0FBVyxHQUFHLEVBQXBDO0FBQ0FOLEVBQUFBLE9BQU8sQ0FBQ2lCLE1BQVI7QUFFQWpCLEVBQUFBLE9BQU8sQ0FBQ3dCLFNBQVIsR0FBb0JuQixPQUFPLENBQUNvQixTQUE1QjtBQUNBekIsRUFBQUEsT0FBTyxDQUFDMEIsU0FBUixHQUFvQixRQUFwQjtBQUNBMUIsRUFBQUEsT0FBTyxDQUFDMkIsWUFBUixHQUF1QixLQUF2QjtBQUNBeEIsRUFBQUEsQ0FBQyxDQUFDTyxNQUFGLEdBQVdDLE9BQVgsQ0FBb0JDLEtBQUQsSUFBVztBQUM1QlosSUFBQUEsT0FBTyxDQUFDNEIsUUFBUixDQUFpQmhCLEtBQWpCLEVBQXdCVCxDQUFDLENBQUNTLEtBQUQsQ0FBRCxHQUFZVCxDQUFDLENBQUNXLFNBQUYsS0FBZ0IsQ0FBcEQsRUFBdURaLE1BQU0sR0FBRyxDQUFoRTtBQUNELEdBRkQ7QUFJQUYsRUFBQUEsT0FBTyxDQUFDMEIsU0FBUixHQUFvQixPQUFwQjtBQUNBMUIsRUFBQUEsT0FBTyxDQUFDMkIsWUFBUixHQUF1QixRQUF2QjtBQUNBUixFQUFBQSxNQUFNLENBQUNSLE9BQVAsQ0FBZ0JVLENBQUQsSUFBTztBQUNwQnJCLElBQUFBLE9BQU8sQ0FBQzRCLFFBQVIsQ0FBaUJQLENBQUMsR0FBRyxFQUFyQixFQUF5QixDQUFDLENBQTFCLEVBQTZCakIsQ0FBQyxDQUFDaUIsQ0FBRCxDQUE5QjtBQUNELEdBRkQ7QUFHRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJnYiB9IGZyb20gXCJkMy1jb2xvclwiXG5pbXBvcnQgeyBTY2FsZUJhbmQsIFNjYWxlTGluZWFyIH0gZnJvbSBcImQzLXNjYWxlXCJcblxuXG5leHBvcnQgZnVuY3Rpb24gZHJhd0F4aXMoXG4gIGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCxcbiAgd2lkdGg6IG51bWJlcixcbiAgaGVpZ2h0OiBudW1iZXIsXG4gIHg6IFNjYWxlQmFuZDxzdHJpbmc+LFxuICB5OiBTY2FsZUxpbmVhcjxudW1iZXIsIG51bWJlcj4sXG4gIG9wdGlvbnM6IHtib3JkZXJDb2xvcjogc3RyaW5nLCB0ZXh0Q29sb3I6IHN0cmluZ31cbikge1xuICBjb25zdCBib3JkZXJDb2xvciA9IHJnYihvcHRpb25zLmJvcmRlckNvbG9yKSFcblxuICAvLyBkcmF3IGF4aXNcbiAgY29udGV4dC5iZWdpblBhdGgoKVxuICBjb250ZXh0Lm1vdmVUbygwLjUsIC41KVxuICBjb250ZXh0LmxpbmVUbygwLjUsIGhlaWdodCArIC41KVxuICBjb250ZXh0LmxpbmVUbyh3aWR0aCwgaGVpZ2h0ICsgLjUpXG5cbiAgeC5kb21haW4oKS5mb3JFYWNoKChsYWJlbCkgPT4ge1xuICAgIGNvbnN0IHhQeCA9IHgobGFiZWwpISArIHguYmFuZHdpZHRoKCkgLyAyXG4gICAgY29udGV4dC5tb3ZlVG8oeFB4LCBoZWlnaHQpXG4gICAgY29udGV4dC5saW5lVG8oeFB4LCBoZWlnaHQgKyA2KVxuICB9KVxuICBjb250ZXh0LnN0cm9rZVN0eWxlID0gYm9yZGVyQ29sb3IudG9TdHJpbmcoKVxuICBjb250ZXh0LnN0cm9rZSgpXG5cbiAgY29udGV4dC5iZWdpblBhdGgoKVxuXG4gIGNvbnN0IHlUaWNrQ291bnQgPSAxMFxuICBjb25zdCB5VGlja3MgPSB5LnRpY2tzKHlUaWNrQ291bnQpXG4gIHlUaWNrcy5mb3JFYWNoKChkKSA9PiB7XG4gICAgY29uc3QgeVB4ID0geShkKSArIDAuNVxuICAgIGNvbnRleHQubW92ZVRvKDAsIHlQeClcbiAgICBjb250ZXh0LmxpbmVUbyh3aWR0aCwgeVB4KVxuICB9KVxuICBib3JkZXJDb2xvci5vcGFjaXR5ID0gMC4yXG4gIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBib3JkZXJDb2xvciArIFwiXCJcbiAgY29udGV4dC5zdHJva2UoKVxuXG4gIGNvbnRleHQuZmlsbFN0eWxlID0gb3B0aW9ucy50ZXh0Q29sb3JcbiAgY29udGV4dC50ZXh0QWxpZ24gPSBcImNlbnRlclwiXG4gIGNvbnRleHQudGV4dEJhc2VsaW5lID0gXCJ0b3BcIlxuICB4LmRvbWFpbigpLmZvckVhY2goKGxhYmVsKSA9PiB7XG4gICAgY29udGV4dC5maWxsVGV4dChsYWJlbCwgeChsYWJlbCkhICsgeC5iYW5kd2lkdGgoKSAvIDIsIGhlaWdodCArIDcpXG4gIH0pXG5cbiAgY29udGV4dC50ZXh0QWxpZ24gPSBcInJpZ2h0XCJcbiAgY29udGV4dC50ZXh0QmFzZWxpbmUgPSBcIm1pZGRsZVwiXG4gIHlUaWNrcy5mb3JFYWNoKChkKSA9PiB7XG4gICAgY29udGV4dC5maWxsVGV4dChkICsgXCJcIiwgLTksIHkoZCkpXG4gIH0pXG59XG4iXX0=