"use strict";

require("core-js/modules/es.array.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BarChart = void 0;

var _canvas = require("canvas");

var _d3Scale = require("d3-scale");

var _canvasImage = require("../image/canvas-image");

var _utils = require("./utils");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class BarChart {
  constructor(options = {}) {
    _defineProperty(this, "options", void 0);

    this.options = {
      borderColor: options.borderColor || "#FFFFFF",
      textColor: options.textColor || "#FFFFFF",
      barColors: options.barColors && options.barColors.length ? options.barColors : ["#0074D9", "#B10DC9", "#7FDBFF", "#F012BE", "#39CCCC", "#85144b", "#3D9970", "#FF4136", "#2ECC40", "#FF851B", "#01FF70", "#FFDC00"],
      width: options.width || 800,
      height: options.height || 400
    };
  }

  draw(labels, datas) {
    const canvas = (0, _canvas.createCanvas)(this.options.width, this.options.height);
    const margin = {
      top: 20,
      right: 20,
      bottom: 30,
      left: 40
    };
    const width = canvas.width - margin.left - margin.right;
    const height = canvas.height - margin.top - margin.bottom;
    const x = (0, _d3Scale.scaleBand)().padding(0.1).rangeRound([0, width]).domain(labels);
    const yMin = Math.min(...datas.map(d => Math.min(...d)));
    const yMax = Math.max(...datas.map(d => Math.max(...d)));
    const y = (0, _d3Scale.scaleLinear)().rangeRound([height, 0]).domain([yMin - (yMax - yMin) * 0.03, yMax]); // draw

    const context = canvas.getContext("2d");
    context.translate(margin.left, margin.top); // draw axis

    (0, _utils.drawAxis)(context, width, height, x, y, this.options);
    const bar = (0, _d3Scale.scaleBand)().padding(0.2).rangeRound([0, x.bandwidth()]).domain(Object.keys(datas));
    datas.forEach((data, dataIndex) => {
      context.fillStyle = this.options.barColors[dataIndex % this.options.barColors.length];
      labels.forEach((label, labelIndex) => {
        if (data[labelIndex]) {
          context.fillRect(x(label) + bar(dataIndex + ""), y(data[labelIndex]), bar.bandwidth(), height - y(data[labelIndex]));
        }
      });
    });
    return new _canvasImage.CanvasImage(canvas);
  }

}

exports.BarChart = BarChart;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jaGFydC9iYXItY2hhcnQudHMiXSwibmFtZXMiOlsiQmFyQ2hhcnQiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJib3JkZXJDb2xvciIsInRleHRDb2xvciIsImJhckNvbG9ycyIsImxlbmd0aCIsIndpZHRoIiwiaGVpZ2h0IiwiZHJhdyIsImxhYmVscyIsImRhdGFzIiwiY2FudmFzIiwibWFyZ2luIiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJsZWZ0IiwieCIsInBhZGRpbmciLCJyYW5nZVJvdW5kIiwiZG9tYWluIiwieU1pbiIsIk1hdGgiLCJtaW4iLCJtYXAiLCJkIiwieU1heCIsIm1heCIsInkiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsInRyYW5zbGF0ZSIsImJhciIsImJhbmR3aWR0aCIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwiZGF0YSIsImRhdGFJbmRleCIsImZpbGxTdHlsZSIsImxhYmVsIiwibGFiZWxJbmRleCIsImZpbGxSZWN0IiwiQ2FudmFzSW1hZ2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUVBOztBQUdBOzs7O0FBRU8sTUFBTUEsUUFBTixDQUFlO0FBSWJDLEVBQUFBLFdBQVAsQ0FBbUJDLE9BQWlDLEdBQUcsRUFBdkQsRUFBMkQ7QUFBQTs7QUFDekQsU0FBS0EsT0FBTCxHQUFlO0FBQ2JDLE1BQUFBLFdBQVcsRUFBRUQsT0FBTyxDQUFDQyxXQUFSLElBQXVCLFNBRHZCO0FBRWJDLE1BQUFBLFNBQVMsRUFBRUYsT0FBTyxDQUFDRSxTQUFSLElBQXFCLFNBRm5CO0FBR2JDLE1BQUFBLFNBQVMsRUFBRUgsT0FBTyxDQUFDRyxTQUFSLElBQXFCSCxPQUFPLENBQUNHLFNBQVIsQ0FBa0JDLE1BQXZDLEdBQWdESixPQUFPLENBQUNHLFNBQXhELEdBQW9FLENBQzdFLFNBRDZFLEVBRTdFLFNBRjZFLEVBRzdFLFNBSDZFLEVBSTdFLFNBSjZFLEVBSzdFLFNBTDZFLEVBTTdFLFNBTjZFLEVB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LFVBQVIsS0FBdUI7QUFDcEMsWUFBSUosSUFBSSxDQUFDSSxVQUFELENBQVIsRUFBc0I7QUFDcEJaLFVBQUFBLE9BQU8sQ0FBQ2EsUUFBUixDQUNFekIsQ0FBQyxDQUFDdUIsS0FBRCxDQUFELEdBQVlSLEdBQUcsQ0FBQ00sU0FBUyxHQUFHLEVBQWIsQ0FEakIsRUFFRVYsQ0FBQyxDQUFDUyxJQUFJLENBQUNJLFVBQUQsQ0FBTCxDQUZILEVBR0VULEdBQUcsQ0FBQ0MsU0FBSixFQUhGLEVBSUUxQixNQUFNLEdBQUdxQixDQUFDLENBQUNTLElBQUksQ0FBQ0ksVUFBRCxDQUFMLENBSlo7QUFNRDtBQUNGLE9BVEQ7QUFVRCxLQVpEO0FBY0EsV0FBTyxJQUFJRSx3QkFBSixDQUFnQmhDLE1BQWhCLENBQVA7QUFDRDs7QUF4RW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQ2FudmFzIH0gZnJvbSBcImNhbnZhc1wiXG5pbXBvcnQgeyBzY2FsZUJhbmQsIHNjYWxlTGluZWFyIH0gZnJvbSBcImQzLXNjYWxlXCJcblxuaW1wb3J0IHsgQ2FudmFzSW1hZ2UgfSBmcm9tIFwiLi4vaW1hZ2UvY2FudmFzLWltYWdlXCJcbmltcG9ydCB7IEJhckNoYXJ0T3B0aW9ucyB9IGZyb20gXCIuLi9pbnRlcmZhY2VzL2NoYXJ0XCJcbmltcG9ydCB7IEltYWdlIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvaW1hZ2VcIlxuaW1wb3J0IHsgZHJhd0F4aXMgfSBmcm9tIFwiLi91dGlsc1wiXG5cbmV4cG9ydCBjbGFzcyBCYXJDaGFydCB7XG5cbiAgcHVibGljIG9wdGlvbnM6IEJhckNoYXJ0T3B0aW9uc1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihvcHRpb25zOiBQYXJ0aWFsPEJhckNoYXJ0T3B0aW9ucz4gPSB7fSkge1xuICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgIGJvcmRlckNvbG9yOiBvcHRpb25zLmJvcmRlckNvbG9yIHx8IFwiI0ZGRkZGRlwiLFxuICAgICAgdGV4dENvbG9yOiBvcHRpb25zLnRleHRDb2xvciB8fCBcIiNGRkZGRkZcIixcbiAgICAgIGJhckNvbG9yczogb3B0aW9ucy5iYXJDb2xvcnMgJiYgb3B0aW9ucy5iYXJDb2xvcnMubGVuZ3RoID8gb3B0aW9ucy5iYXJDb2xvcnMgOiBbXG4gICAgICAgIFwiIzAwNzREOVwiLFxuICAgICAgICBcIiNCMTBEQzlcIixcbiAgICAgICAgXCIjN0ZEQkZGXCIsXG4gICAgICAgIFwiI0YwMTJCRVwiLFxuICAgICAgICBcIiMzOUNDQ0NcIixcbiAgICAgICAgXCIjODUxNDRiXCIsXG4gICAgICAgIFwiIzNEOTk3MFwiLFxuICAgICAgICBcIiNGRjQxMzZcIixcbiAgICAgICAgXCIjMkVDQzQwXCIsXG4gICAgICAgIFwiI0ZGODUxQlwiLFxuICAgICAgICBcIiMwMUZGNzBcIixcbiAgICAgICAgXCIjRkZEQzAwXCIsXG4gICAgICBdLFxuICAgICAgd2lkdGg6IG9wdGlvbnMud2lkdGggfHwgODAwLFxuICAgICAgaGVpZ2h0OiBvcHRpb25zLmhlaWdodCB8fCA0MDAsXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGRyYXcobGFiZWxzOiBzdHJpbmdbXSwgZGF0YXM6IG51bWJlcltdW10pOiBJbWFnZSB7XG4gICAgY29uc3QgY2FudmFzID0gY3JlYXRlQ2FudmFzKHRoaXMub3B0aW9ucy53aWR0aCwgdGhpcy5vcHRpb25zLmhlaWdodClcblxuICAgIGNvbnN0IG1hcmdpbiA9IHt0b3A6IDIwLCByaWdodDogMjAsIGJvdHRvbTogMzAsIGxlZnQ6IDQwfVxuICAgIGNvbnN0IHdpZHRoID0gY2FudmFzLndpZHRoIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHRcbiAgICBjb25zdCBoZWlnaHQgPSBjYW52YXMuaGVpZ2h0IC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b21cblxuICAgIGNvbnN0IHggPSBzY2FsZUJhbmQoKVxuICAgICAgLnBhZGRpbmcoMC4xKVxuICAgICAgLnJhbmdlUm91bmQoWzAsIHdpZHRoXSlcbiAgICAgIC5kb21haW4obGFiZWxzKVxuXG4gICAgY29uc3QgeU1pbiA9IE1hdGgubWluKC4uLmRhdGFzLm1hcChkID0+IE1hdGgubWluKC4uLmQpKSlcbiAgICBjb25zdCB5TWF4ID0gTWF0aC5tYXgoLi4uZGF0YXMubWFwKGQgPT4gTWF0aC5tYXgoLi4uZCkpKVxuICAgIGNvbnN0IHkgPSBzY2FsZUxpbmVhcigpXG4gICAgICAucmFuZ2VSb3VuZChbaGVpZ2h0LCAwXSlcbiAgICAgIC5kb21haW4oW3lNaW4gLSAoeU1heCAtIHlNaW4pICogMC4wMywgeU1heF0pXG5cbiAgICAvLyBkcmF3XG4gICAgY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIilcbiAgICBjb250ZXh0LnRyYW5zbGF0ZShtYXJnaW4ubGVmdCwgbWFyZ2luLnRvcClcblxuICAgIC8vIGRyYXcgYXhpc1xuICAgIGRyYXdBeGlzKGNvbnRleHQsIHdpZHRoLCBoZWlnaHQsIHgsIHksIHRoaXMub3B0aW9ucylcblxuICAgIGNvbnN0IGJhciA9IHNjYWxlQmFuZCgpXG4gICAgICAucGFkZGluZygwLjIpXG4gICAgICAucmFuZ2VSb3VuZChbMCwgeC5iYW5kd2lkdGgoKV0pXG4gICAgICAuZG9tYWluKE9iamVjdC5rZXlzKGRhdGFzKSlcblxuICAgIGRhdGFzLmZvckVhY2goKGRhdGEsIGRhdGFJbmRleCkgPT4ge1xuICAgICAgY29udGV4dC5maWxsU3R5bGUgPSB0aGlzLm9wdGlvbnMuYmFyQ29sb3JzW2RhdGFJbmRleCAlIHRoaXMub3B0aW9ucy5iYXJDb2xvcnMubGVuZ3RoXVxuICAgICAgbGFiZWxzLmZvckVhY2goKGxhYmVsLCBsYWJlbEluZGV4KSA9PiB7XG4gICAgICAgIGlmIChkYXRhW2xhYmVsSW5kZXhdKSB7XG4gICAgICAgICAgY29udGV4dC5maWxsUmVjdChcbiAgICAgICAgICAgIHgobGFiZWwpISArIGJhcihkYXRhSW5kZXggKyBcIlwiKSEsXG4gICAgICAgICAgICB5KGRhdGFbbGFiZWxJbmRleF0pLFxuICAgICAgICAgICAgYmFyLmJhbmR3aWR0aCgpLFxuICAgICAgICAgICAgaGVpZ2h0IC0geShkYXRhW2xhYmVsSW5kZXhdKVxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgcmV0dXJuIG5ldyBDYW52YXNJbWFnZShjYW52YXMpXG4gIH1cbn1cbiJdfQ==