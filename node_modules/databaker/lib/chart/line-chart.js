"use strict";

require("core-js/modules/es.array.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LineChart = void 0;

var _canvas = require("canvas");

var _d3Scale = require("d3-scale");

var _canvasImage = require("../image/canvas-image");

var _utils = require("./utils");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class LineChart {
  constructor(options = {}) {
    _defineProperty(this, "options", void 0);

    this.options = {
      borderColor: options.borderColor || "#FFFFFF",
      textColor: options.textColor || "#FFFFFF",
      lineColors: options.lineColors && options.lineColors.length ? options.lineColors : ["#0074D9", "#B10DC9", "#7FDBFF", "#F012BE", "#39CCCC", "#85144b", "#3D9970", "#FF4136", "#2ECC40", "#FF851B", "#01FF70", "#FFDC00"],
      width: options.width || 800,
      height: options.height || 400
    };
  }

  draw(labels, datas) {
    const canvas = (0, _canvas.createCanvas)(this.options.width, this.options.height);
    const margin = {
      top: 20,
      right: 20,
      bottom: 30,
      left: 40
    };
    const width = canvas.width - margin.left - margin.right;
    const height = canvas.height - margin.top - margin.bottom;
    const x = (0, _d3Scale.scaleBand)().padding(0.1).rangeRound([0, width]).domain(labels);
    const yMin = Math.min(...datas.map(d => Math.min(...d)));
    const yMax = Math.max(...datas.map(d => Math.max(...d)));
    const y = (0, _d3Scale.scaleLinear)().rangeRound([height, 0]).domain([yMin - (yMax - yMin) * 0.03, yMax]); // draw

    const context = canvas.getContext("2d");
    context.translate(margin.left, margin.top); // draw axis

    (0, _utils.drawAxis)(context, width, height, x, y, this.options);
    const xWidth = x.bandwidth() / 2;
    datas.forEach((data, dataIndex) => {
      context.beginPath();
      context.lineWidth = 1.5;
      context.strokeStyle = this.options.lineColors[dataIndex % this.options.lineColors.length];
      let isFirst = true;
      labels.forEach((label, labelIndex) => {
        if (isFirst) {
          isFirst = false;
          context.moveTo(xWidth + x(label), y(data[labelIndex]));
        } else {
          context.lineTo(xWidth + x(label), y(data[labelIndex]));
        } // if (data[labelIndex]) {
        // }

      });
      context.stroke();
    });
    return new _canvasImage.CanvasImage(canvas);
  }

}

exports.LineChart = LineChart;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jaGFydC9saW5lLWNoYXJ0LnRzIl0sIm5hbWVzIjpbIkxpbmVDaGFydCIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsImJvcmRlckNvbG9yIiwidGV4dENvbG9yIiwibGluZUNvbG9ycyIsImxlbmd0aCIsIndpZHRoIiwiaGVpZ2h0IiwiZHJhdyIsImxhYmVscyIsImRhdGFzIiwiY2FudmFzIiwibWFyZ2luIiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJsZWZ0IiwieCIsInBhZGRpbmciLCJyYW5nZVJvdW5kIiwiZG9tYWluIiwieU1pbiIsIk1hdGgiLCJtaW4iLCJtYXAiLCJkIiwieU1heCIsIm1heCIsInkiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsInRyYW5zbGF0ZSIsInhXaWR0aCIsImJhbmR3aWR0aCIsImZvckVhY2giLCJkYXRhIiwiZGF0YUluZGV4IiwiYmVnaW5QYXRoIiwibGluZVdpZHRoIiwic3Ryb2tlU3R5bGUiLCJpc0ZpcnN0IiwibGFiZWwiLCJsYWJlbEluZGV4IiwibW92ZVRvIiwibGluZVRvIiwic3Ryb2tlIiwiQ2FudmFzSW1hZ2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUVBOztBQUdBOzs7O0FBRU8sTUFBTUEsU0FBTixDQUFnQjtBQUlkQyxFQUFBQSxXQUFQLENBQW1CQyxPQUFrQyxHQUFHLEVBQXhELEVBQTREO0FBQUE7O0FBQzFELFNBQUtBLE9BQUwsR0FBZTtBQUNiQyxNQUFBQSxXQUFXLEVBQUVELE9BQU8sQ0FBQ0MsV0FBUixJQUF1QixTQUR2QjtBQUViQyxNQUFBQSxTQUFTLEVBQUVGLE9BQU8sQ0FBQ0UsU0FBUixJQUFxQixTQUZuQjtBQUdiQyxNQUFBQSxVQUFVLEVBQUVILE9BQU8sQ0FBQ0csVUFBUixJQUFzQkgsT0FBTyxDQUFDRyxVQUFSLENBQW1CQyxNQUF6QyxHQUFrREosT0FBTyxDQUFDRyxVQUExRCxHQUF1RSxDQUNqRixTQURpRixFQUVqRixTQUZpRixFQUdqRixT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LENBQUN5QixPQUFQLENBQWUsQ0FBQ08sS0FBRCxFQUFRQyxVQUFSLEtBQXVCO0FBQ3BDLFlBQUlGLE9BQUosRUFBYTtBQUNYQSxVQUFBQSxPQUFPLEdBQUcsS0FBVjtBQUNBWCxVQUFBQSxPQUFPLENBQUNjLE1BQVIsQ0FBZVgsTUFBTSxHQUFHZixDQUFDLENBQUN3QixLQUFELENBQXpCLEVBQW1DYixDQUFDLENBQUNPLElBQUksQ0FBQ08sVUFBRCxDQUFMLENBQXBDO0FBQ0QsU0FIRCxNQUdPO0FBQ0xiLFVBQUFBLE9BQU8sQ0FBQ2UsTUFBUixDQUFlWixNQUFNLEdBQUdmLENBQUMsQ0FBQ3dCLEtBQUQsQ0FBekIsRUFBbUNiLENBQUMsQ0FBQ08sSUFBSSxDQUFDTyxVQUFELENBQUwsQ0FBcEM7QUFDRCxTQU5tQyxDQU9wQztBQUNBOztBQUNELE9BVEQ7QUFVQWIsTUFBQUEsT0FBTyxDQUFDZ0IsTUFBUjtBQUNELEtBaEJEO0FBa0JBLFdBQU8sSUFBSUMsd0JBQUosQ0FBZ0JuQyxNQUFoQixDQUFQO0FBQ0Q7O0FBeEVvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUNhbnZhcyB9IGZyb20gXCJjYW52YXNcIlxuaW1wb3J0IHsgc2NhbGVCYW5kLCBzY2FsZUxpbmVhciB9IGZyb20gXCJkMy1zY2FsZVwiXG5cbmltcG9ydCB7IENhbnZhc0ltYWdlIH0gZnJvbSBcIi4uL2ltYWdlL2NhbnZhcy1pbWFnZVwiXG5pbXBvcnQgeyBMaW5lQ2hhcnRPcHRpb25zIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvY2hhcnRcIlxuaW1wb3J0IHsgSW1hZ2UgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9pbWFnZVwiXG5pbXBvcnQgeyBkcmF3QXhpcyB9IGZyb20gXCIuL3V0aWxzXCJcblxuZXhwb3J0IGNsYXNzIExpbmVDaGFydCB7XG5cbiAgcHVibGljIG9wdGlvbnM6IExpbmVDaGFydE9wdGlvbnNcblxuICBwdWJsaWMgY29uc3RydWN0b3Iob3B0aW9uczogUGFydGlhbDxMaW5lQ2hhcnRPcHRpb25zPiA9IHt9KSB7XG4gICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgYm9yZGVyQ29sb3I6IG9wdGlvbnMuYm9yZGVyQ29sb3IgfHwgXCIjRkZGRkZGXCIsXG4gICAgICB0ZXh0Q29sb3I6IG9wdGlvbnMudGV4dENvbG9yIHx8IFwiI0ZGRkZGRlwiLFxuICAgICAgbGluZUNvbG9yczogb3B0aW9ucy5saW5lQ29sb3JzICYmIG9wdGlvbnMubGluZUNvbG9ycy5sZW5ndGggPyBvcHRpb25zLmxpbmVDb2xvcnMgOiBbXG4gICAgICAgIFwiIzAwNzREOVwiLFxuICAgICAgICBcIiNCMTBEQzlcIixcbiAgICAgICAgXCIjN0ZEQkZGXCIsXG4gICAgICAgIFwiI0YwMTJCRVwiLFxuICAgICAgICBcIiMzOUNDQ0NcIixcbiAgICAgICAgXCIjODUxNDRiXCIsXG4gICAgICAgIFwiIzNEOTk3MFwiLFxuICAgICAgICBcIiNGRjQxMzZcIixcbiAgICAgICAgXCIjMkVDQzQwXCIsXG4gICAgICAgIFwiI0ZGODUxQlwiLFxuICAgICAgICBcIiMwMUZGNzBcIixcbiAgICAgICAgXCIjRkZEQzAwXCIsXG4gICAgICBdLFxuICAgICAgd2lkdGg6IG9wdGlvbnMud2lkdGggfHwgODAwLFxuICAgICAgaGVpZ2h0OiBvcHRpb25zLmhlaWdodCB8fCA0MDAsXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGRyYXcobGFiZWxzOiBzdHJpbmdbXSwgZGF0YXM6IG51bWJlcltdW10pOiBJbWFnZSB7XG4gICAgY29uc3QgY2FudmFzID0gY3JlYXRlQ2FudmFzKHRoaXMub3B0aW9ucy53aWR0aCwgdGhpcy5vcHRpb25zLmhlaWdodClcblxuICAgIGNvbnN0IG1hcmdpbiA9IHt0b3A6IDIwLCByaWdodDogMjAsIGJvdHRvbTogMzAsIGxlZnQ6IDQwfVxuICAgIGNvbnN0IHdpZHRoID0gY2FudmFzLndpZHRoIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHRcbiAgICBjb25zdCBoZWlnaHQgPSBjYW52YXMuaGVpZ2h0IC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b21cblxuICAgIGNvbnN0IHggPSBzY2FsZUJhbmQoKVxuICAgICAgLnBhZGRpbmcoMC4xKVxuICAgICAgLnJhbmdlUm91bmQoWzAsIHdpZHRoXSlcbiAgICAgIC5kb21haW4obGFiZWxzKVxuXG4gICAgY29uc3QgeU1pbiA9IE1hdGgubWluKC4uLmRhdGFzLm1hcChkID0+IE1hdGgubWluKC4uLmQpKSlcbiAgICBjb25zdCB5TWF4ID0gTWF0aC5tYXgoLi4uZGF0YXMubWFwKGQgPT4gTWF0aC5tYXgoLi4uZCkpKVxuICAgIGNvbnN0IHkgPSBzY2FsZUxpbmVhcigpXG4gICAgICAucmFuZ2VSb3VuZChbaGVpZ2h0LCAwXSlcbiAgICAgIC5kb21haW4oW3lNaW4gLSAoeU1heCAtIHlNaW4pICogMC4wMywgeU1heF0pXG5cbiAgICAvLyBkcmF3XG4gICAgY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIilcbiAgICBjb250ZXh0LnRyYW5zbGF0ZShtYXJnaW4ubGVmdCwgbWFyZ2luLnRvcClcblxuICAgIC8vIGRyYXcgYXhpc1xuICAgIGRyYXdBeGlzKGNvbnRleHQsIHdpZHRoLCBoZWlnaHQsIHgsIHksIHRoaXMub3B0aW9ucylcblxuICAgIGNvbnN0IHhXaWR0aCA9IHguYmFuZHdpZHRoKCkgLyAyXG4gICAgZGF0YXMuZm9yRWFjaCgoZGF0YSwgZGF0YUluZGV4KSA9PiB7XG4gICAgICBjb250ZXh0LmJlZ2luUGF0aCgpXG4gICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IDEuNVxuICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IHRoaXMub3B0aW9ucy5saW5lQ29sb3JzW2RhdGFJbmRleCAlIHRoaXMub3B0aW9ucy5saW5lQ29sb3JzLmxlbmd0aF1cbiAgICAgIGxldCBpc0ZpcnN0ID0gdHJ1ZVxuICAgICAgbGFiZWxzLmZvckVhY2goKGxhYmVsLCBsYWJlbEluZGV4KSA9PiB7XG4gICAgICAgIGlmIChpc0ZpcnN0KSB7XG4gICAgICAgICAgaXNGaXJzdCA9IGZhbHNlXG4gICAgICAgICAgY29udGV4dC5tb3ZlVG8oeFdpZHRoICsgeChsYWJlbCkhLCB5KGRhdGFbbGFiZWxJbmRleF0pKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnRleHQubGluZVRvKHhXaWR0aCArIHgobGFiZWwpISwgeShkYXRhW2xhYmVsSW5kZXhdKSlcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiAoZGF0YVtsYWJlbEluZGV4XSkge1xuICAgICAgICAvLyB9XG4gICAgICB9KVxuICAgICAgY29udGV4dC5zdHJva2UoKVxuICAgIH0pXG5cbiAgICByZXR1cm4gbmV3IENhbnZhc0ltYWdlKGNhbnZhcylcbiAgfVxufVxuIl19