
// const T_WHITESPACE = /^\s+/
// const T_STRING = /^[a-zA-Z0-9-_]+/

// /*
// array: '[' ']'
//   | '[' values ']'
// values: value
//   | value ',' values

// object: '{' '}'
//   | '{' objectpairs '}'

// objectpairs: objectpair
//   | objectpairs ',' objectpair

// objectpair: objectkey ':' value
// objectkey: T_STRING
//  */

// let buf = null
// let match = null

// function white() {
//   while (1) {
//     match = buf.match(T_WHITESPACE)
//     if (!match) {
//       return
//     } else {
//       buf = buf.slice(match[0].length)
//     }
//   }
// }

// function next(cnt = 1) {
//   buf = buf.slice(cnt)
//   white()
// }

// /*
// value: T_STRING
//   | T_NUMBER
//   | T_TRUE
//   | T_FALSE
//   | T_NULL
//   | T_INFINITY
//   | T_NINFINITY
//   | T_NAN
//   | T_REGEXP
//   | array
//   | object
//  */
// function value() {
//   white()
//   match = buf.match(T_STRING)
//   if (match) {
//     const t = match[0]
//     next(t.length)
//     return t // .replace(/^"|"$/g, "").replace(/\\\"/g, "\"")
//   }
//   switch (buf[0]) {
//     case "[":
//      return array()
//     case "{":
//      return object()
//   }
//   error("value")
// }

// function array() {
//   next() // resolve [
//   if (buf[0] === "]") { // empty array
//     next()
//     return []
//   }
//   const result = [value()]
//   white()
//   while (buf[0] === ",") {
//     next()
//     result.push(value())
//     white()
//   }
//   if (buf[0] === "]") {
//     next()
//     return result
//   }
//   throw error("]")
// }

// function object() {
//   next() // resolve {
//   if (buf[0] === "}") { // empty object
//     next()
//     return {}
//   }
//   const result = objectpair()
//   white()
//   while (buf[0] === ",") {
//     next()
//     Object.assign(result, objectpair())
//     white()
//   }
//   if (buf[0] === "}") {
//     next()
//     return result
//   }
//   throw error("}")
// }

// function objectpair() {
//   match = buf.match(T_STRING)
//   if (match) {
//     const t = match[0]
//     next(t.length)
//     const key = t.replace(/^"|"$/g, "").replace(/\\\"/g, "\"")
//     if (buf[0] === "=") {
//       next()
//       return {[key]: value()}
//     }
//     throw error("=")
//   }
//   throw error("object key")
// }

// function error(expected) {
//   throw new Error(`expected ${expected}, unexpected ${buf[0]}`)
// }

// function parse(ctx) {
//   buf = ctx
//   const result = value()

//   white()
//   if (buf.length) {
//     throw error("EOF")
//   }
//   return result
// }

// module.exports = {
//   parse,
// }
